#include "web_content.h"

namespace esphome {
namespace ledbrick_web_server {

const char INDEX_HTML[] = "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>LEDBrick Control Panel</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;\n            background-color: #1a1a2e;\n            color: #eee;\n            line-height: 1.6;\n            padding: 20px;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        \n        h1 {\n            text-align: center;\n            color: #4a90e2;\n            margin-bottom: 30px;\n        }\n        \n        .card {\n            background-color: #16213e;\n            border-radius: 8px;\n            padding: 20px;\n            margin-bottom: 20px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n        }\n        \n        .card h2 {\n            color: #4a90e2;\n            margin-bottom: 15px;\n            font-size: 1.2em;\n        }\n        \n        .control-group {\n            display: grid;\n            gap: 15px;\n            margin-bottom: 15px;\n        }\n        \n        .control-row {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        label {\n            flex: 0 0 120px;\n            font-weight: 500;\n        }\n        \n        input[type=\"text\"],\n        input[type=\"number\"],\n        input[type=\"password\"],\n        select,\n        textarea {\n            flex: 1;\n            padding: 8px 12px;\n            background-color: #0f3460;\n            border: 1px solid #2d4263;\n            border-radius: 4px;\n            color: #fff;\n            font-size: 14px;\n        }\n        \n        input[type=\"range\"] {\n            flex: 1;\n        }\n        \n        button {\n            background-color: #4a90e2;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            font-weight: 500;\n            transition: background-color 0.2s;\n        }\n        \n        button:hover {\n            background-color: #357abd;\n        }\n        \n        button:disabled {\n            background-color: #666;\n            cursor: not-allowed;\n        }\n        \n        .button-group {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n        \n        .status {\n            padding: 10px;\n            background-color: #0f3460;\n            border-radius: 4px;\n            font-family: monospace;\n            font-size: 13px;\n            white-space: pre-wrap;\n            max-height: 200px;\n            overflow-y: auto;\n        }\n        \n        .error {\n            color: #ff6b6b;\n        }\n        \n        .success {\n            color: #51cf66;\n        }\n        \n        .channel-controls {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 15px;\n        }\n        \n        .channel-item {\n            background-color: #0f3460;\n            padding: 15px;\n            border-radius: 4px;\n        }\n        \n        .channel-item h3 {\n            color: #4a90e2;\n            margin-bottom: 10px;\n            font-size: 1em;\n        }\n        \n        .value-display {\n            font-family: monospace;\n            color: #51cf66;\n        }\n        \n        .json-editor {\n            min-height: 200px;\n            font-family: monospace;\n            font-size: 12px;\n        }\n        \n        .preset-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n            gap: 10px;\n        }\n        \n        @media (max-width: 768px) {\n            .control-row {\n                flex-direction: column;\n                align-items: stretch;\n            }\n            \n            label {\n                flex: unset;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>LEDBrick Control Panel</h1>\n        \n        <!-- Connection Settings -->\n        <div class=\"card\">\n            <h2>Connection Settings</h2>\n            <div class=\"control-group\">\n                <div class=\"control-row\">\n                    <label for=\"deviceUrl\">Device URL:</label>\n                    <input type=\"text\" id=\"deviceUrl\" value=\"http://ledbrickplus.local\" placeholder=\"http://192.168.1.100\">\n                </div>\n                <div class=\"control-row\">\n                    <label for=\"username\">Username:</label>\n                    <input type=\"text\" id=\"username\" placeholder=\"admin (leave empty if no auth)\">\n                </div>\n                <div class=\"control-row\">\n                    <label for=\"password\">Password:</label>\n                    <input type=\"password\" id=\"password\" placeholder=\"password (leave empty if no auth)\">\n                </div>\n                <button onclick=\"testConnection()\">Test Connection</button>\n            </div>\n            <div id=\"connectionStatus\" class=\"status\" style=\"margin-top: 10px; display: none;\"></div>\n        </div>\n        \n        <!-- Quick Controls -->\n        <div class=\"card\">\n            <h2>Quick Controls</h2>\n            <div class=\"button-group\">\n                <button onclick=\"toggleScheduler()\">Toggle Scheduler</button>\n                <button onclick=\"setPWMScale(100)\">Full Brightness</button>\n                <button onclick=\"setPWMScale(50)\">50% Brightness</button>\n                <button onclick=\"setPWMScale(30)\">Dim (30%)</button>\n                <button onclick=\"setPWMScale(0)\">Off</button>\n            </div>\n            <div class=\"control-row\" style=\"margin-top: 15px;\">\n                <label for=\"pwmScale\">PWM Scale:</label>\n                <input type=\"range\" id=\"pwmScale\" min=\"0\" max=\"100\" value=\"100\" oninput=\"updatePWMScale(this.value)\">\n                <span class=\"value-display\" id=\"pwmScaleValue\">100%</span>\n            </div>\n        </div>\n        \n        <!-- Preset Management -->\n        <div class=\"card\">\n            <h2>Preset Management</h2>\n            <div class=\"preset-grid\">\n                <button onclick=\"loadPreset('dynamic_sunrise_sunset')\">Dynamic Sunrise</button>\n                <button onclick=\"loadPreset('full_spectrum')\">Full Spectrum</button>\n                <button onclick=\"loadPreset('simple')\">Simple</button>\n                <button onclick=\"loadPreset('reef_natural')\">Reef Natural</button>\n                <button onclick=\"loadPreset('planted_co2')\">Planted CO2</button>\n                <button onclick=\"loadPreset('moonlight_only')\">Moonlight Only</button>\n            </div>\n            <div class=\"button-group\" style=\"margin-top: 15px;\">\n                <button onclick=\"executeScript('web_quick_sunrise_demo')\">Load Sunrise Demo</button>\n                <button onclick=\"clearSchedule()\">Clear Schedule</button>\n                <button onclick=\"saveToFlash()\">Save to Flash</button>\n            </div>\n        </div>\n        \n        <!-- Schedule Point Editor -->\n        <div class=\"card\">\n            <h2>Add Schedule Point</h2>\n            <div class=\"control-group\">\n                <div class=\"control-row\">\n                    <label for=\"scheduleTime\">Time:</label>\n                    <input type=\"time\" id=\"scheduleTime\" value=\"12:00\">\n                </div>\n                <div class=\"channel-controls\">\n                    <div class=\"channel-item\">\n                        <h3>Channel 1 (Blue)</h3>\n                        <input type=\"range\" id=\"ch1pwm\" min=\"0\" max=\"100\" value=\"0\">\n                        <span class=\"value-display\" id=\"ch1val\">0%</span>\n                    </div>\n                    <div class=\"channel-item\">\n                        <h3>Channel 2 (Royal Blue)</h3>\n                        <input type=\"range\" id=\"ch2pwm\" min=\"0\" max=\"100\" value=\"0\">\n                        <span class=\"value-display\" id=\"ch2val\">0%</span>\n                    </div>\n                    <div class=\"channel-item\">\n                        <h3>Channel 3 (UV)</h3>\n                        <input type=\"range\" id=\"ch3pwm\" min=\"0\" max=\"100\" value=\"0\">\n                        <span class=\"value-display\" id=\"ch3val\">0%</span>\n                    </div>\n                    <div class=\"channel-item\">\n                        <h3>Channel 4 (White)</h3>\n                        <input type=\"range\" id=\"ch4pwm\" min=\"0\" max=\"100\" value=\"0\">\n                        <span class=\"value-display\" id=\"ch4val\">0%</span>\n                    </div>\n                </div>\n                <button onclick=\"addSchedulePoint()\" style=\"margin-top: 15px;\">Add Schedule Point</button>\n            </div>\n        </div>\n        \n        <!-- JSON Import/Export -->\n        <div class=\"card\">\n            <h2>Schedule JSON Import/Export</h2>\n            <div class=\"control-group\">\n                <textarea id=\"jsonData\" class=\"json-editor\" placeholder=\"Paste schedule JSON here...\"></textarea>\n                <div class=\"button-group\">\n                    <button onclick=\"exportSchedule()\">Export Current Schedule</button>\n                    <button onclick=\"importSchedule()\">Import Schedule</button>\n                    <button onclick=\"formatJSON()\">Format JSON</button>\n                </div>\n            </div>\n            <div id=\"jsonStatus\" class=\"status\" style=\"margin-top: 10px; display: none;\"></div>\n        </div>\n        \n        <!-- System Status -->\n        <div class=\"card\">\n            <h2>System Status</h2>\n            <div id=\"systemStatus\" class=\"status\">\n                <div>Scheduler: <span id=\"schedulerStatus\">Unknown</span></div>\n                <div>Current Time: <span id=\"currentTime\">--:--</span></div>\n                <div>Schedule Points: <span id=\"schedulePoints\">-</span></div>\n                <div>Active Preset: <span id=\"activePreset\">-</span></div>\n            </div>\n            <button onclick=\"updateStatus()\">Refresh Status</button>\n        </div>\n    </div>\n    \n    <script src=\"ledbrick-api.js\"></script>\n</body>\n</html>";

const char LEDBRICK_JS[] = "// LEDBrick API Client\n// Uses the REST API endpoints provided by the ledbrick_api component\n\nclass LEDBrickAPI {\n    constructor(baseUrl = '') {\n        this.baseUrl = baseUrl || window.location.origin;\n        this.authHeader = null;\n    }\n    \n    // Set authentication credentials\n    setAuth(username, password) {\n        if (username && password) {\n            this.authHeader = 'Basic ' + btoa(username + ':' + password);\n        } else {\n            this.authHeader = null;\n        }\n    }\n    \n    // Make API request\n    async request(method, path, body = null) {\n        const options = {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        \n        if (this.authHeader) {\n            options.headers['Authorization'] = this.authHeader;\n        }\n        \n        if (body) {\n            options.body = JSON.stringify(body);\n        }\n        \n        const response = await fetch(this.baseUrl + path, options);\n        const text = await response.text();\n        \n        if (!response.ok) {\n            let error;\n            try {\n                error = JSON.parse(text);\n            } catch (e) {\n                error = { error: text, code: response.status };\n            }\n            throw error;\n        }\n        \n        try {\n            return JSON.parse(text);\n        } catch (e) {\n            return text;\n        }\n    }\n    \n    // Get current schedule as JSON\n    async getSchedule() {\n        return this.request('GET', '/api/schedule');\n    }\n    \n    // Import schedule from JSON\n    async importSchedule(scheduleJson) {\n        // If it's an object, stringify it\n        if (typeof scheduleJson === 'object') {\n            scheduleJson = JSON.stringify(scheduleJson);\n        }\n        // Send as raw JSON string in body\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: scheduleJson\n        };\n        \n        if (this.authHeader) {\n            options.headers['Authorization'] = this.authHeader;\n        }\n        \n        const response = await fetch(this.baseUrl + '/api/schedule', options);\n        return response.json();\n    }\n    \n    // Get available presets\n    async getPresets() {\n        return this.request('GET', '/api/presets');\n    }\n    \n    // Load a preset\n    async loadPreset(presetName) {\n        return this.request('POST', `/api/presets/${presetName}`);\n    }\n    \n    // Get current status\n    async getStatus() {\n        return this.request('GET', '/api/status');\n    }\n    \n    // Clear schedule\n    async clearSchedule() {\n        return this.request('POST', '/api/schedule/clear');\n    }\n    \n    // Add schedule point\n    async addSchedulePoint(timeMinutes, pwmValues, currentValues = null) {\n        const data = {\n            time_minutes: timeMinutes,\n            pwm_values: pwmValues,\n            current_values: currentValues || new Array(8).fill(2.0)\n        };\n        return this.request('POST', '/api/schedule/point', data);\n    }\n    \n    // Control scheduler enable/disable (using standard ESPHome endpoints)\n    async setSchedulerEnabled(enabled) {\n        const action = enabled ? 'turn_on' : 'turn_off';\n        return this.request('POST', `/switch/web_scheduler_enable/${action}`);\n    }\n    \n    // Get scheduler state\n    async getSchedulerEnabled() {\n        const response = await this.request('GET', '/switch/web_scheduler_enable');\n        return response.state === 'ON';\n    }\n    \n    // Set PWM scale\n    async setPWMScale(value) {\n        // Use URL-encoded form data for ESPHome endpoints\n        const params = new URLSearchParams();\n        params.append('value', value);\n        \n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: params\n        };\n        \n        if (this.authHeader) {\n            options.headers['Authorization'] = this.authHeader;\n        }\n        \n        const response = await fetch(this.baseUrl + '/number/pwm_scale/set', options);\n        return response.text();\n    }\n    \n    // Get PWM scale\n    async getPWMScale() {\n        const response = await this.request('GET', '/number/pwm_scale');\n        return response.value;\n    }\n}\n\n// Create global instance\nconst ledbrickAPI = new LEDBrickAPI();\n\n// Updated functions for the HTML interface\nasync function testConnection() {\n    const status = document.getElementById('connectionStatus');\n    status.style.display = 'block';\n    status.className = 'status';\n    status.textContent = 'Testing connection...';\n    \n    // Save settings\n    const deviceUrl = document.getElementById('deviceUrl').value;\n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n    \n    localStorage.setItem('deviceUrl', deviceUrl);\n    ledbrickAPI.baseUrl = deviceUrl;\n    ledbrickAPI.setAuth(username, password);\n    \n    try {\n        const result = await ledbrickAPI.getStatus();\n        status.className = 'status success';\n        status.textContent = `Connected! Schedule has ${result.schedule_points} points.`;\n        updateStatus();\n    } catch (error) {\n        status.className = 'status error';\n        status.textContent = 'Connection failed: ' + (error.error || error.message || 'Unknown error');\n    }\n}\n\nasync function toggleScheduler() {\n    try {\n        const currentState = await ledbrickAPI.getSchedulerEnabled();\n        await ledbrickAPI.setSchedulerEnabled(!currentState);\n        showStatus('Scheduler ' + (currentState ? 'disabled' : 'enabled'), 'success');\n        updateStatus();\n    } catch (error) {\n        showStatus('Failed to toggle scheduler: ' + error.error, 'error');\n    }\n}\n\nasync function setPWMScale(value) {\n    try {\n        await ledbrickAPI.setPWMScale(value);\n        document.getElementById('pwmScale').value = value;\n        document.getElementById('pwmScaleValue').textContent = value + '%';\n        showStatus(`Brightness set to ${value}%`, 'success');\n    } catch (error) {\n        showStatus('Failed to set brightness: ' + error.error, 'error');\n    }\n}\n\nasync function loadPreset(presetName) {\n    try {\n        const result = await ledbrickAPI.loadPreset(presetName);\n        showStatus(result.message || `Loaded preset: ${presetName}`, 'success');\n        setTimeout(updateStatus, 1000);\n    } catch (error) {\n        showStatus('Failed to load preset: ' + error.error, 'error');\n    }\n}\n\nasync function clearSchedule() {\n    if (!confirm('Are you sure you want to clear the schedule?')) {\n        return;\n    }\n    \n    try {\n        const result = await ledbrickAPI.clearSchedule();\n        showStatus(result.message || 'Schedule cleared', 'success');\n        setTimeout(updateStatus, 1000);\n    } catch (error) {\n        showStatus('Failed to clear schedule: ' + error.error, 'error');\n    }\n}\n\nasync function addSchedulePoint() {\n    try {\n        // Get time in minutes\n        const timeStr = document.getElementById('scheduleTime').value;\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        const timeMinutes = hours * 60 + minutes;\n        \n        // Get channel values\n        const pwmValues = [];\n        for (let i = 1; i <= 4; i++) {\n            pwmValues.push(parseFloat(document.getElementById(`ch${i}pwm`).value));\n        }\n        // Add zeros for channels 5-8\n        pwmValues.push(0, 0, 0, 0);\n        \n        const result = await ledbrickAPI.addSchedulePoint(timeMinutes, pwmValues);\n        showStatus(result.message || `Added schedule point at ${timeStr}`, 'success');\n        setTimeout(updateStatus, 1000);\n    } catch (error) {\n        showStatus('Failed to add schedule point: ' + error.error, 'error');\n    }\n}\n\nasync function exportSchedule() {\n    try {\n        const schedule = await ledbrickAPI.getSchedule();\n        const formatted = JSON.stringify(schedule, null, 2);\n        document.getElementById('jsonData').value = formatted;\n        showJsonStatus('Schedule exported successfully', 'success');\n    } catch (error) {\n        showJsonStatus('Failed to export schedule: ' + error.error, 'error');\n    }\n}\n\nasync function importSchedule() {\n    const jsonData = document.getElementById('jsonData').value.trim();\n    if (!jsonData) {\n        showJsonStatus('Please enter JSON data', 'error');\n        return;\n    }\n    \n    try {\n        // Validate JSON\n        JSON.parse(jsonData);\n        \n        const result = await ledbrickAPI.importSchedule(jsonData);\n        showJsonStatus(result.message || 'Schedule imported successfully', 'success');\n        setTimeout(updateStatus, 1000);\n    } catch (error) {\n        if (error instanceof SyntaxError) {\n            showJsonStatus('Invalid JSON format', 'error');\n        } else {\n            showJsonStatus('Failed to import: ' + (error.error || error.message), 'error');\n        }\n    }\n}\n\nasync function updateStatus() {\n    try {\n        const status = await ledbrickAPI.getStatus();\n        \n        // Update all status fields\n        document.getElementById('schedulerStatus').textContent = \n            status.enabled ? 'Enabled' : 'Disabled';\n        document.getElementById('currentTime').textContent = \n            status.time_formatted || '--:--';\n        document.getElementById('schedulePoints').textContent = \n            status.schedule_points || '0';\n        \n        // Update PWM scale\n        const pwmScale = status.pwm_scale * 100;\n        document.getElementById('pwmScale').value = pwmScale;\n        document.getElementById('pwmScaleValue').textContent = pwmScale + '%';\n        \n    } catch (error) {\n        console.error('Failed to update status:', error);\n    }\n}\n\n// Initialize on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Load saved settings\n    const savedUrl = localStorage.getItem('deviceUrl');\n    if (savedUrl) {\n        document.getElementById('deviceUrl').value = savedUrl;\n        ledbrickAPI.baseUrl = savedUrl;\n    }\n    \n    // Set up channel sliders\n    for (let i = 1; i <= 4; i++) {\n        const slider = document.getElementById(`ch${i}pwm`);\n        const display = document.getElementById(`ch${i}val`);\n        slider.addEventListener('input', function() {\n            display.textContent = this.value + '%';\n        });\n    }\n    \n    // Update status after a delay\n    setTimeout(updateStatus, 1000);\n});";

const char STYLE_CSS[] = "/* LEDBrick Web UI Embedded Styles */\n\n/* Custom styling for ESPHome web server integration */\n.ledbrick-controls {\n    background-color: #16213e;\n    border-radius: 8px;\n    padding: 20px;\n    margin: 20px 0;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.ledbrick-controls h3 {\n    color: #4a90e2;\n    margin-bottom: 15px;\n}\n\n.ledbrick-button-group {\n    display: flex;\n    gap: 10px;\n    flex-wrap: wrap;\n    margin-bottom: 15px;\n}\n\n.ledbrick-button {\n    background-color: #4a90e2;\n    color: white;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 14px;\n    transition: background-color 0.2s;\n}\n\n.ledbrick-button:hover {\n    background-color: #357abd;\n}\n\n.ledbrick-slider {\n    width: 100%;\n    margin: 10px 0;\n}\n\n.ledbrick-json-container {\n    margin-top: 20px;\n}\n\n.ledbrick-json-textarea {\n    width: 100%;\n    min-height: 150px;\n    background-color: #0f3460;\n    border: 1px solid #2d4263;\n    border-radius: 4px;\n    color: #fff;\n    font-family: monospace;\n    font-size: 12px;\n    padding: 10px;\n    resize: vertical;\n}\n\n/* Override ESPHome default styles for better integration */\nbody.ledbrick-theme {\n    background-color: #1a1a2e;\n    color: #eee;\n}\n\n.ledbrick-theme .card {\n    background-color: #16213e;\n    border-color: #2d4263;\n}\n\n.ledbrick-theme input,\n.ledbrick-theme select,\n.ledbrick-theme textarea {\n    background-color: #0f3460;\n    border-color: #2d4263;\n    color: #fff;\n}\n\n/* Quick action buttons */\n.ledbrick-quick-actions {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.ledbrick-fab {\n    width: 56px;\n    height: 56px;\n    border-radius: 50%;\n    background-color: #4a90e2;\n    color: white;\n    border: none;\n    cursor: pointer;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s;\n}\n\n.ledbrick-fab:hover {\n    transform: scale(1.1);\n    background-color: #357abd;\n}";

}  // namespace ledbrick_web_server
}  // namespace esphome
