# LEDBrick Scheduler Services Package
# Simplified JSON-based Home Assistant integration for the LEDBrick Scheduler

api:
  services:
    # === Built-in Presets ===
    
    # Load a built-in preset
    - service: load_preset
      variables:
        preset_name: string  # "sunrise_sunset", "full_spectrum", "simple"
      then:
        - lambda: |-
            id(main_scheduler).load_preset(preset_name);
            ESP_LOGI("main", "Loaded preset: %s", preset_name.c_str());

    # Clear all schedule points
    - service: clear_schedule
      then:
        - lambda: |-
            id(main_scheduler).clear_schedule();
        - logger.log: "Cleared all schedule points"

    # === Data Export/Import Services ===
    
    # Export current schedule as JSON (to logs)
    - service: export_schedule
      then:
        - lambda: |-
            std::string json_output;
            id(main_scheduler).export_schedule_json(json_output);
            ESP_LOGI("main", "Schedule Export: %s", json_output.c_str());

    # Get schedule as JSON (logs the JSON data)
    - service: get_schedule_json
      then:
        - lambda: |-
            std::string json_output;
            id(main_scheduler).export_schedule_json(json_output);
            ESP_LOGI("main", "Schedule JSON Export: %s", json_output.c_str());

    # Import schedule from JSON
    - service: import_schedule_json
      variables:
        json_data: string
      then:
        - lambda: |-
            bool success = id(main_scheduler).import_schedule_json(json_data);
            if (success) {
              ESP_LOGI("main", "Schedule JSON import successful");
            } else {
              ESP_LOGW("main", "Schedule JSON import failed - invalid format");
            }

    # Force save schedule to flash
    - service: save_to_flash
      then:
        - lambda: |-
            id(main_scheduler).save_schedule_to_flash();
        - logger.log: "Schedule saved to flash memory"

    # Force reload schedule from flash
    - service: load_from_flash
      then:
        - lambda: |-
            id(main_scheduler).load_schedule_from_flash();
        - logger.log: "Schedule loaded from flash memory"

    # === Schedule Status ===
    
    # Get current schedule size (number of points)
    - service: get_schedule_size
      then:
        - lambda: |-
            size_t size = id(main_scheduler).get_schedule_size();
            ESP_LOGI("main", "Schedule contains %d points", (int)size);

    # Get current interpolated values (for debugging)
    - service: get_current_values
      then:
        - lambda: |-
            auto values = id(main_scheduler).get_current_values();
            if (values.valid) {
              ESP_LOGI("main", "Current interpolated values (%d channels):", 
                       values.pwm_values.size());
              for (size_t i = 0; i < values.pwm_values.size() && i < 8; i++) {
                ESP_LOGI("main", "  Ch%d: PWM=%.1f%%, Current=%.2fA", 
                         (int)i+1, values.pwm_values[i], values.current_values[i]);
              }
            } else {
              ESP_LOGW("main", "No valid interpolated values available");
            }

# === Status Sensors ===
# These sensors report the current state to Home Assistant

sensor:
  # Current scheduler time in minutes
  - platform: template
    name: "Scheduler Current Time Minutes"
    id: scheduler_time_minutes
    accuracy_decimals: 0
    unit_of_measurement: "min"
    lambda: |-
      return id(main_scheduler).get_current_time_minutes();
    update_interval: 60s

  # Current PWM values for monitoring (channel 1 as example)
  - platform: template
    name: "Scheduler PWM Channel 1"
    id: scheduler_pwm_ch1
    accuracy_decimals: 1
    unit_of_measurement: "%"
    lambda: |-
      auto values = id(main_scheduler).get_current_values();
      return values.pwm_values.size() > 0 ? values.pwm_values[0] : 0.0f;
    update_interval: 30s

  # Current values for monitoring (channel 1 as example)
  - platform: template
    name: "Scheduler Current Channel 1"
    id: scheduler_current_ch1
    accuracy_decimals: 2
    unit_of_measurement: "A"
    lambda: |-
      auto values = id(main_scheduler).get_current_values();
      return values.current_values.size() > 0 ? values.current_values[0] : 0.0f;
    update_interval: 30s
  
  # Moon phase percentage
  - platform: template
    name: "Moon Phase"
    id: moon_phase_sensor
    accuracy_decimals: 1
    unit_of_measurement: "%"
    lambda: |-
      return id(main_scheduler).get_moon_phase() * 100.0f;
    update_interval: 3600s  # Update every hour

# === Number Entities ===

number:
  # PWM scale control (0-100%)
  - platform: template
    name: "PWM Scale"
    id: pwm_scale_number
    optimistic: false
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    mode: slider
    lambda: |-
      return id(main_scheduler).get_pwm_scale() * 100.0f;
    set_action:
      then:
        - lambda: |-
            id(main_scheduler).set_pwm_scale(x / 100.0f);

  # Location controls
  - platform: template
    id: latitude
    name: "Latitude"
    optimistic: false
    min_value: -90
    max_value: 90
    step: 0.01
    unit_of_measurement: "°"
    mode: box
    lambda: |-
      return id(main_scheduler).get_latitude();
    set_action:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(x, id(main_scheduler).get_longitude());
            }

  - platform: template
    id: longitude
    name: "Longitude"
    optimistic: false
    min_value: -180
    max_value: 180
    step: 0.01
    unit_of_measurement: "°"
    mode: box
    lambda: |-
      return id(main_scheduler).get_longitude();
    set_action:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(id(main_scheduler).get_latitude(), x);
            }

  # Time shift controls
  - platform: template
    id: time_shift_hours
    name: "Time Shift Hours"
    optimistic: false
    min_value: -12
    max_value: 12
    step: 1
    unit_of_measurement: "h"
    mode: box
    lambda: |-
      return id(main_scheduler).get_time_shift_hours();
    set_action:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_time_shift(x, id(main_scheduler).get_time_shift_minutes());
            }

  - platform: template
    id: time_shift_minutes
    name: "Time Shift Minutes"
    optimistic: false
    min_value: -59
    max_value: 59
    step: 1
    unit_of_measurement: "min"
    mode: box
    lambda: |-
      return id(main_scheduler).get_time_shift_minutes();
    set_action:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_time_shift(id(main_scheduler).get_time_shift_hours(), x);
            }

# === Switch Entities ===

switch:
  # Main scheduler enable/disable
  - platform: template
    name: "Scheduler Enabled"
    id: scheduler_enabled
    optimistic: false
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      return id(main_scheduler).is_enabled();
    turn_on_action:
      - lambda: |-
          id(main_scheduler).set_enabled(true);
    turn_off_action:
      - lambda: |-
          id(main_scheduler).set_enabled(false);

  # Astronomical projection toggle
  - platform: template
    name: "Astronomical Projection"
    id: astronomical_projection
    optimistic: false
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      return id(main_scheduler).is_astronomical_projection_enabled();
    turn_on_action:
      - lambda: |-
          if (id(main_scheduler) != nullptr) {
            id(main_scheduler).set_astronomical_projection(true);
          }
    turn_off_action:
      - lambda: |-
          if (id(main_scheduler) != nullptr) {
            id(main_scheduler).set_astronomical_projection(false);
          }

# === Button Entities (Location Presets) ===

button:
  # City location presets
  - platform: template
    name: "Set Location: San Francisco"
    id: location_san_francisco
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(37.7749, -122.4194);
            }

  - platform: template
    name: "Set Location: Los Angeles"
    id: location_los_angeles
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(34.0522, -118.2437);
            }

  - platform: template
    name: "Set Location: Singapore"
    id: location_singapore
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(1.3521, 103.8198);
            }

  - platform: template
    name: "Set Location: Sydney"
    id: location_sydney
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(-33.8688, 151.2093);
            }

  # Reef location presets
  - platform: template
    name: "Set Location: Great Barrier Reef"
    id: location_great_barrier_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(-16.2859, 145.7781);
            }

  - platform: template
    name: "Set Location: Caribbean Reef"
    id: location_caribbean_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(18.2208, -66.5901);
            }

  - platform: template
    name: "Set Location: Maldives Reef"
    id: location_maldives_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(3.2028, 73.2207);
            }

  - platform: template
    name: "Set Location: Red Sea Reef"
    id: location_red_sea_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(27.2946, 33.8317);
            }

  - platform: template
    name: "Set Location: Belize Reef"
    id: location_belize_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(17.1899, -87.9407);
            }

  - platform: template
    name: "Set Location: Palau Reef"
    id: location_palau_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(7.5150, 134.5825);
            }

  - platform: template
    name: "Set Location: Fiji Reef"
    id: location_fiji_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(-17.7134, 178.0650);
            }

  - platform: template
    name: "Set Location: Philippines Reef"
    id: location_philippines_reef
    on_press:
      then:
        - lambda: |-
            if (id(main_scheduler) != nullptr) {
              id(main_scheduler).set_location(12.8797, 121.7740);
            }

# === Text Sensors ===

text_sensor:
  # Color sensors for each channel (registered by channels package)
  # These are populated by the channel package and updated by the scheduler