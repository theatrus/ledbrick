# Home Assistant PWM Scale Example for LEDBrick Scheduler
# 
# The PWM scale feature allows global dimming of all channels
# without modifying the schedule. This is useful for:
# - Temporary dimming during feeding or maintenance
# - Adjusting overall brightness for different seasons
# - Compensating for LED aging over time
# - Energy saving modes

# Basic PWM Scale Control
# Scale is 0.0 to 1.0 (0% to 100%)

# The PWM Scale is now a number entity that can be controlled directly
# No need for additional input_number or automations to sync

# Feeding Mode - Dims lights to 30% for 10 minutes
script:
  feeding_mode:
    alias: "Feeding Mode"
    sequence:
      # Store current scale
      - service: input_text.set_value
        target:
          entity_id: input_text.previous_pwm_scale
        data:
          value: "{{ states('number.ledbrick_plus_pwm_scale') }}"
      
      # Dim to 30%
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 30
      
      # Notify
      - service: notify.mobile_app_phone
        data:
          title: "Feeding Mode Active"
          message: "Lights dimmed to 30% for 10 minutes"
      
      # Wait 10 minutes
      - delay:
          minutes: 10
      
      # Restore previous scale
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: "{{ states('input_text.previous_pwm_scale') | float }}"
      
      - service: notify.mobile_app_phone
        data:
          title: "Feeding Mode Complete"
          message: "Lights restored to normal"

# Helper to store previous scale
input_text:
  previous_pwm_scale:
    name: Previous PWM Scale
    initial: "100"

# Maintenance Mode - Very dim lights for tank work
script:
  maintenance_mode:
    alias: "Maintenance Mode"
    sequence:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 10  # 10% brightness
      - service: notify.mobile_app_phone
        data:
          title: "Maintenance Mode"
          message: "Lights dimmed to 10%"

# Energy Saving Modes
automation:
  # Eco mode - 80% brightness
  - alias: "Eco Mode"
    trigger:
      - platform: state
        entity_id: input_select.power_mode
        to: "Eco"
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 80

  # Normal mode - 100% brightness
  - alias: "Normal Mode"
    trigger:
      - platform: state
        entity_id: input_select.power_mode
        to: "Normal"
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 100

  # Power saving mode - 60% brightness
  - alias: "Power Saving Mode"
    trigger:
      - platform: state
        entity_id: input_select.power_mode
        to: "Power Saving"
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 60

input_select:
  power_mode:
    name: Power Mode
    options:
      - Normal
      - Eco
      - Power Saving
    initial: Normal
    icon: mdi:flash

# Seasonal Adjustments
automation:
  # Summer - slightly dimmer to reduce heat
  - alias: "Summer Light Adjustment"
    trigger:
      - platform: time
        at: "00:01:00"
    condition:
      - condition: template
        value_template: >
          {% set month = now().month %}
          {{ month in [6, 7, 8] }}
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 90  # 90% in summer

  # Winter - full brightness
  - alias: "Winter Light Adjustment"
    trigger:
      - platform: time
        at: "00:01:00"
    condition:
      - condition: template
        value_template: >
          {% set month = now().month %}
          {{ month in [12, 1, 2] }}
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 100  # 100% in winter

# LED Aging Compensation
# Increase scale over time to compensate for LED output degradation
automation:
  - alias: "LED Aging Compensation"
    trigger:
      - platform: time
        at: "03:00:00"  # Run at 3 AM
      - platform: homeassistant
        event: start
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: >
            {# Calculate scale based on LED age in months #}
            {% set install_date = '2024-01-01' %}
            {% set months_old = ((now() - strptime(install_date, '%Y-%m-%d')).days / 30) | int %}
            {% set degradation_per_month = 0.002 %}  {# 0.2% per month #}
            {% set compensation = 1.0 + (months_old * degradation_per_month) %}
            {% set max_compensation = 1.1 %}  {# Max 110% #}
            {{ ([compensation, max_compensation] | min * 100) | int }}

# Storm Simulation - Rapid dimming
script:
  storm_simulation:
    alias: "Storm Simulation"
    sequence:
      - repeat:
          count: 20
          sequence:
            # Random dim
            - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
              data:
                value: "{{ range(20, 80) | random }}"
            - delay:
                milliseconds: "{{ range(100, 500) | random }}"
      # Return to normal
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 100

# Photography Mode - Specific brightness for photos
script:
  photo_mode:
    alias: "Photography Mode"
    sequence:
      # Set to optimal photo brightness
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: 85  # 85% prevents overexposure
      - service: notify.mobile_app_phone
        data:
          title: "Photo Mode Active"
          message: "Lights set to 85% for photography"

# Create a Lovelace card for PWM scale control
# Add this to your dashboard configuration:
#
# type: entities
# title: Lighting Control
# entities:
#   - entity: sensor.ledbrick_plus_pwm_scale
#     name: Current Brightness Scale
#   - entity: number.ledbrick_plus_pwm_scale
#     name: Brightness Control
#   - type: divider
#   - entity: input_select.power_mode
#     name: Power Mode
#   - type: section
#     label: Quick Actions
#   - type: button
#     name: Feeding Mode
#     tap_action:
#       action: call-service
#       service: script.feeding_mode
#     icon: mdi:fish
#   - type: button
#     name: Maintenance
#     tap_action:
#       action: call-service
#       service: script.maintenance_mode
#     icon: mdi:wrench
#   - type: button
#     name: Photo Mode
#     tap_action:
#       action: call-service
#       service: script.photo_mode
#     icon: mdi:camera

# Advanced: Link PWM scale to ambient light sensor
automation:
  - alias: "Auto Brightness from Ambient Light"
    trigger:
      - platform: state
        entity_id: sensor.room_ambient_light
    condition:
      - condition: state
        entity_id: input_boolean.auto_brightness
        state: 'on'
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrick_plus_pwm_scale
        data:
          value: >
            {# Scale based on room brightness #}
            {% set ambient = states('sensor.room_ambient_light') | float %}
            {% if ambient > 1000 %}
              100
            {% elif ambient > 500 %}
              90
            {% elif ambient > 200 %}
              80
            {% else %}
              70
            {% endif %}

input_boolean:
  auto_brightness:
    name: Auto Brightness Adjustment
    icon: mdi:brightness-auto