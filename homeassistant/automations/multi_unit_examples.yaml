# Multi-Unit Automation Examples
# These automations show how to coordinate multiple LEDBrick units
#
# IMPORTANT: This file contains EXAMPLE automations for multi-unit setups.
# You MUST replace all unit names (like "ledbrickplus", "ledbrick_tank1", etc.) 
# with your actual ESPHome device names.
# 
# The examples show patterns for:
# - Coordinating multiple units across tanks
# - Tank-specific configurations  
# - Staggered startup sequences
# - Temperature protection
#
# These are NOT meant to work out-of-the-box - they are templates
# for you to customize based on your setup.

automation:
  # Synchronized feeding mode across all tanks
  - alias: "Multi-Tank Synchronized Feeding"
    id: multi_tank_sync_feeding
    trigger:
      - platform: time
        at: "18:00:00"  # 6 PM feeding time
    action:
      # Get list of all units
      - variables:
          all_units:
            - "ledbrickplus"
            - "ledbrick_tank1" 
            - "ledbrick_tank2"
            - "ledbrick_frag"
      
      # Store current brightness for each unit
      - repeat:
          for_each: "{{ all_units }}"
          sequence:
            - service: input_text.set_value
              target:
                entity_id: "input_text.{{ repeat.item }}_saved_brightness"
              data:
                value: "{{ states('number.' + repeat.item + '_pwm_scale') | default(100) }}"
      
      # Dim all units simultaneously
      - repeat:
          for_each: "{{ all_units }}"
          sequence:
            - service: number.set_value
              data:
                entity_id: "number.{{ repeat.item }}_pwm_scale"
                value: 30
              continue_on_error: true
      
      # Turn off return pumps if configured
      - service: switch.turn_off
        target:
          entity_id:
            - switch.tank1_return_pump
            - switch.tank2_return_pump
            - switch.frag_return_pump
        continue_on_error: true
      
      # Wait for feeding duration
      - delay:
          minutes: "{{ states('input_number.feeding_duration') | int }}"
      
      # Restore brightness for each unit
      - repeat:
          for_each: "{{ all_units }}"
          sequence:
            - service: number.set_value
              data:
                entity_id: "number.{{ repeat.item }}_pwm_scale"
                value: "{{ states('input_text.' + repeat.item + '_saved_brightness') | float(100) }}"
              continue_on_error: true
      
      # Turn pumps back on
      - service: switch.turn_on
        target:
          entity_id:
            - switch.tank1_return_pump
            - switch.tank2_return_pump
            - switch.frag_return_pump
        continue_on_error: true
  
  # Different schedules for different tank types
  - alias: "Multi-Tank Type-Based Configuration"
    id: multi_tank_type_config
    trigger:
      - platform: homeassistant
        event: start
      - platform: time
        at: "04:00:00"  # Daily reconfiguration
    action:
      # Example: Configure units based on tank type
      # Note: Replace 'unit_name' with your actual ESPHome device names
      - variables:
          reef_units: ["ledbrick_reef_1", "ledbrick_reef_2"]  # Replace with your unit names
          planted_units: ["ledbrick_planted"]  # Replace with your unit names
      
      # Configure reef tank units
      - repeat:
          for_each: "{{ reef_units }}"
          sequence:
            - service: "esphome.{{ repeat.item }}_load_preset"
              data:
                preset_name: "dynamic_sunrise_sunset"
              continue_on_error: true
            
            - service: "esphome.{{ repeat.item }}_set_moon_base_intensity_8ch"
              data:
                intensity_ch1: 4.0  # Blue moonlight
                intensity_ch2: 0.0
                intensity_ch3: 0.0
                intensity_ch4: 2.0  # White moonlight
                intensity_ch5: 0.0
                intensity_ch6: 0.0
                intensity_ch7: 3.0  # Royal blue
                intensity_ch8: 0.0
              continue_on_error: true
      
      # Configure planted tank units differently
      - repeat:
          for_each: "{{ planted_units }}"
          sequence:
            - service: "esphome.{{ repeat.item }}_clear_schedule"
              continue_on_error: true
            
            - service: "esphome.{{ repeat.item }}_set_schedule_point_8ch"
              data:
                time_minutes: 420  # 7 AM
                pwm_ch1: 20    # Less blue
                pwm_ch2: 10
                pwm_ch3: 0
                pwm_ch4: 60    # More white
                pwm_ch5: 80    # Warm white
                pwm_ch6: 50    # Red for plants
                pwm_ch7: 30    # Green
                pwm_ch8: 40    # Far red
                current_ch1: 0.4
                current_ch2: 0.2
                current_ch3: 0
                current_ch4: 1.2
                current_ch5: 1.6
                current_ch6: 1.0
                current_ch7: 0.6
                current_ch8: 0.8
              continue_on_error: true
      
      # Configure frag tank units with extended photoperiod
      - variables:
          frag_units: ["ledbrick_frag"]  # Replace with your unit names
      
      - repeat:
          for_each: "{{ frag_units }}"
          sequence:
            - service: "esphome.{{ repeat.item }}_load_preset"
              data:
                preset_name: "full_spectrum"
              continue_on_error: true
            
            - service: number.set_value
              target:
                entity_id: "number.{{ repeat.item }}_pwm_scale"
              data:
                value: 120  # Higher intensity for coral growth
              continue_on_error: true
  
  # Staggered startup to avoid power surge
  - alias: "Multi-Tank Staggered Morning Startup"
    id: multi_tank_staggered_start
    trigger:
      - platform: sun
        event: sunrise
        offset: "-00:30:00"
    action:
      - variables:
          # Define your units in startup order (smallest to largest load)
          # Replace with your actual unit names
          startup_order:
            - "ledbrick_frag"      # Frag tank
            - "ledbrick_planted"   # Planted tank  
            - "ledbrick_reef_1"    # Main reef left
            - "ledbrick_reef_2"    # Main reef right
      
      # Start units in sequence with delays
      - repeat:
          for_each: "{{ startup_order }}"
          sequence:
            - service: switch.turn_on
              target:
                entity_id: "switch.{{ repeat.item }}_scheduler_enabled"
              continue_on_error: true
            
            - delay:
                seconds: 30
  
  # Temperature-based protection for all units
  - alias: "Multi-Tank Temperature Protection"
    id: multi_tank_temp_protection
    # Note: Add your actual temperature sensor entity IDs below
    trigger:
      - platform: numeric_state
        entity_id: 
          - sensor.ledbrick_reef_1_temperature     # Replace with your sensors
          - sensor.ledbrick_reef_2_temperature
          - sensor.ledbrick_planted_temperature
          - sensor.ledbrick_frag_temperature
        above: 65
        for:
          minutes: 2
    variables:
      # Find which unit triggered
      triggered_unit: >
        {% for entity in trigger.to_state.entity_id %}
          {% if states(entity) | float > 65 %}
            {{ entity.split('.')[1].replace('_temperature', '') }}
          {% endif %}
        {% endfor %}
    action:
      # Reduce brightness on the overheating unit
      - service: number.set_value
        data:
          entity_id: "number.{{ triggered_unit }}_pwm_scale"
          value: 70
      
      - service: notify.mobile_app_phone
        data:
          title: "⚠️ LEDBrick Temperature Alert"
          message: "{{ triggered_unit }} is at {{ trigger.to_state.state }}°C"
          data:
            tag: "temp_{{ triggered_unit }}"
  
  # Maintenance mode for specific tank
  - alias: "Multi-Tank Individual Maintenance"
    id: multi_tank_maintenance
    trigger:
      - platform: state
        entity_id: input_select.maintenance_tank
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'None' }}"
    action:
      - variables:
          tank_unit: "{{ trigger.to_state.state }}"
      
      # Dim only the tank being maintained
      - service: number.set_value
        data:
          entity_id: "number.{{ tank_unit }}_pwm_scale"
          value: 10
      
      # Turn off its return pump
      - service: switch.turn_off
        data:
          entity_id: "switch.{{ tank_unit }}_return_pump"
        continue_on_error: true
      
      # Create persistent notification
      - service: persistent_notification.create
        data:
          title: "Maintenance Mode Active"
          message: "{{ tank_unit }} is in maintenance mode"
          notification_id: "maint_{{ tank_unit }}"

# Input selects for multi-tank control
input_select:
  maintenance_tank:
    name: "Tank Under Maintenance"
    options:
      - "None"
      - "ledbrickplus"
      - "ledbrick_tank1"
      - "ledbrick_tank2"
      - "ledbrick_frag"
    initial: "None"
    icon: mdi:wrench

# Input texts for storing unit states
input_text:
  ledbrickplus_saved_brightness:
    name: "Main Tank Saved Brightness"
    initial: "100"
    
  ledbrick_tank1_saved_brightness:
    name: "Tank 1 Saved Brightness"
    initial: "100"
    
  ledbrick_tank2_saved_brightness:
    name: "Tank 2 Saved Brightness"
    initial: "100"
    
  ledbrick_frag_saved_brightness:
    name: "Frag Tank Saved Brightness"
    initial: "100"