# Seasonal and Environmental Adjustments

automation:
  # Seasonal PWM Scale Adjustment
  - alias: "Seasonal Light Adjustment"
    id: seasonal_light_adjustment
    trigger:
      - platform: time
        at: "00:01:00"
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.auto_seasonal_adjust
        state: "on"
    action:
      - variables:
          month: "{{ now().month }}"
          # Summer months need less light (heat reduction)
          # Winter months need more light (compensate for shorter days)
          seasonal_scale: >
            {% if month in [6, 7, 8] %}
              90
            {% elif month in [12, 1, 2] %}
              100
            {% elif month in [3, 4, 5] %}
              95
            {% else %}
              95
            {% endif %}
      
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: "{{ seasonal_scale }}"
      
      - service: notify.mobile_app_phone
        data:
          title: "🌡️ Seasonal Adjustment"
          message: "Light intensity adjusted to {{ seasonal_scale }}% for {{ ['','January','February','March','April','May','June','July','August','September','October','November','December'][month] }}"
  
  # Temperature-based dimming
  - alias: "Temperature Protection"
    id: temperature_protection
    trigger:
      - platform: numeric_state
        entity_id: sensor.ledbrickplus_temperature
        above: 65
        for:
          minutes: 5
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: >
            {% set temp = states('sensor.ledbrickplus_temperature') | float %}
            {% if temp > 70 %}
              70
            {% elif temp > 65 %}
              80
            {% else %}
              90
            {% endif %}
      
      - service: notify.mobile_app_phone
        data:
          title: "⚠️ High Temperature Alert"
          message: "LED temperature is {{ states('sensor.ledbrickplus_temperature') }}°C. Reducing brightness for protection."
          data:
            importance: high
            tag: temp_alert
  
  # Room ambient light compensation
  - alias: "Ambient Light Compensation"
    id: ambient_light_compensation
    trigger:
      - platform: state
        entity_id: sensor.room_brightness
      - platform: time_pattern
        minutes: "/15"  # Check every 15 minutes
    condition:
      - condition: state
        entity_id: input_boolean.auto_brightness
        state: "on"
      - condition: time
        after: "08:00:00"
        before: "20:00:00"
    action:
      - variables:
          ambient: "{{ states('sensor.room_brightness') | float(0) }}"
          compensation_factor: >
            {% if ambient > 1000 %}
              1.0
            {% elif ambient > 500 %}
              0.95
            {% elif ambient > 200 %}
              0.90
            {% else %}
              0.85
            {% endif %}
      
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: "{{ (100 * compensation_factor) | int }}"
  
  # Storm simulation
  - alias: "Storm Simulation"
    id: storm_simulation
    trigger:
      - platform: state
        entity_id: input_boolean.storm_mode_enabled
        to: "on"
    action:
      - repeat:
          while:
            - condition: state
              entity_id: input_boolean.storm_mode_enabled
              state: "on"
          sequence:
            # Lightning flash
            - service: number.set_value
              target:
                entity_id: number.ledbrickplus_pwm_scale
              data:
                value: "{{ range(20, 100) | random }}"
            
            - delay:
                milliseconds: "{{ range(50, 200) | random }}"
            
            # Return to dimmed state
            - service: number.set_value
              target:
                entity_id: number.ledbrickplus_pwm_scale
              data:
                value: "{{ range(40, 60) | random }}"
            
            # Random delay between flashes
            - delay:
                seconds: "{{ range(5, 30) | random }}"
      
      # Return to normal when disabled
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: 100
  
  # LED aging compensation
  - alias: "LED Aging Compensation"
    id: led_aging_compensation
    trigger:
      - platform: time
        at: "03:00:00"
      - platform: homeassistant
        event: start
    action:
      - variables:
          install_date: "2024-01-01"  # Update this to your install date
          days_old: "{{ ((now() - strptime(install_date, '%Y-%m-%d')).days) | int }}"
          months_old: "{{ (days_old / 30) | int }}"
          # Assume 0.5% degradation per month, max 10% compensation
          compensation_percent: "{{ [100 + (months_old * 0.5), 110] | min }}"
      
      - service: persistent_notification.create
        data:
          title: "LED Aging Compensation"
          message: >
            LEDs are {{ months_old }} months old.
            Applying {{ compensation_percent | round(1) }}% compensation factor.
      
      # This would typically adjust individual channel max currents
      # rather than global PWM scale
  
  # Dynamic schedule adjustment based on season
  - alias: "Dynamic Schedule Seasonal Update"
    id: dynamic_schedule_seasonal
    trigger:
      - platform: time
        at: "04:00:00"
      - platform: state
        entity_id: sensor.season
    action:
      - choose:
          # Summer - longer days, shifted schedule
          - conditions:
              - condition: state
                entity_id: sensor.season
                state: "summer"
            sequence:
              - service: esphome.ledbrickplus_clear_schedule
              
              - service: esphome.ledbrickplus_set_dynamic_schedule_point_8ch
                data:
                  time_type: "sunrise_relative"
                  offset_minutes: -60  # Start earlier in summer
                  pwm_ch1: 10
                  pwm_ch2: 10
                  pwm_ch3: 5
                  pwm_ch4: 15
                  pwm_ch5: 10
                  pwm_ch6: 5
                  pwm_ch7: 0
                  pwm_ch8: 0
                  current_ch1: 0.2
                  current_ch2: 0.2
                  current_ch3: 0.1
                  current_ch4: 0.3
                  current_ch5: 0.2
                  current_ch6: 0.1
                  current_ch7: 0
                  current_ch8: 0
          
          # Winter - shorter days, compressed schedule
          - conditions:
              - condition: state
                entity_id: sensor.season
                state: "winter"
            sequence:
              - service: esphome.ledbrickplus_clear_schedule
              
              - service: esphome.ledbrickplus_set_dynamic_schedule_point_8ch
                data:
                  time_type: "sunrise_relative"
                  offset_minutes: 0  # Start at sunrise in winter
                  pwm_ch1: 20
                  pwm_ch2: 15
                  pwm_ch3: 10
                  pwm_ch4: 25
                  pwm_ch5: 20
                  pwm_ch6: 10
                  pwm_ch7: 5
                  pwm_ch8: 5
                  current_ch1: 0.4
                  current_ch2: 0.3
                  current_ch3: 0.2
                  current_ch4: 0.5
                  current_ch5: 0.4
                  current_ch6: 0.2
                  current_ch7: 0.1
                  current_ch8: 0.1