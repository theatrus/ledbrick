# LEDBrick Complete Home Assistant Package
# 
# Installation:
# 1. Copy this file to your Home Assistant packages directory
# 2. Add to configuration.yaml:
#    homeassistant:
#      packages: !include_dir_named packages
# 3. Restart Home Assistant
#
# This package includes all entities, automations, and scripts
# needed for full LEDBrick control.

# Input helpers for configuration
input_number:
  ledbrick_quick_brightness:
    name: "LEDBrick Quick Brightness"
    min: 0
    max: 100
    step: 5
    unit_of_measurement: "%"
    icon: mdi:brightness-6
    
  feeding_duration:
    name: "Feeding Duration"
    min: 5
    max: 30
    step: 5
    unit_of_measurement: "min"
    icon: mdi:timer-sand
    initial: 10
    
  photo_brightness:
    name: "Photo Mode Brightness"
    min: 50
    max: 100
    step: 5
    unit_of_measurement: "%"
    icon: mdi:camera
    initial: 85
    
  moon_blue_intensity:
    name: "Moon Blue Intensity"
    min: 0
    max: 10
    step: 0.5
    unit_of_measurement: "%"
    icon: mdi:moon-waning-crescent
    initial: 3.0
    
  moon_white_intensity:
    name: "Moon White Intensity"
    min: 0
    max: 5
    step: 0.25
    unit_of_measurement: "%"
    icon: mdi:moon-full
    initial: 1.5

input_select:
  tank_type:
    name: "Tank Type"
    options:
      - "Reef"
      - "Planted"
      - "Fish Only"
      - "Coral Propagation"
    initial: "Reef"
    icon: mdi:fishbowl
    
  lighting_mode:
    name: "Lighting Mode"
    options:
      - "Schedule"
      - "Manual"
      - "Maintenance"
      - "Photography"
      - "Night Viewing"
    initial: "Schedule"
    icon: mdi:lightbulb-group
    
  power_mode:
    name: "Power Mode"
    options:
      - "Normal"
      - "Eco"
      - "Power Saving"
      - "Maximum"
    initial: "Normal"
    icon: mdi:lightning-bolt

input_boolean:
  auto_seasonal_adjust:
    name: "Auto Seasonal Adjustment"
    icon: mdi:weather-sunny
    
  storm_mode_enabled:
    name: "Storm Mode"
    icon: mdi:weather-lightning
    
  maintenance_mode:
    name: "Maintenance Mode"
    icon: mdi:wrench
    
  feeding_mode:
    name: "Feeding Mode"
    icon: mdi:fish
    
  night_viewing:
    name: "Night Viewing Mode"
    icon: mdi:moon-waning-crescent

input_text:
  previous_pwm_scale:
    name: "Previous PWM Scale"
    initial: "100"
    
  previous_mode:
    name: "Previous Mode"
    initial: "Schedule"

# Timers
timer:
  feeding_timer:
    name: "Feeding Timer"
    icon: mdi:timer-sand

# Template sensors
sensor:
  - platform: template
    sensors:
      ledbrick_power_consumption:
        friendly_name: "LEDBrick Power"
        unit_of_measurement: "W"
        device_class: power
        value_template: >
          {% set ch1 = states('sensor.ledbrickplus_scheduler_current_channel_1') | float(0) %}
          {% set ch2 = states('sensor.ledbrickplus_scheduler_current_channel_2') | float(0) %}
          {% set ch3 = states('sensor.ledbrickplus_scheduler_current_channel_3') | float(0) %}
          {% set ch4 = states('sensor.ledbrickplus_scheduler_current_channel_4') | float(0) %}
          {% set total_current = ch1 + ch2 + ch3 + ch4 %}
          {{ (24 * total_current * 2) | round(1) }}
      
      ledbrick_daily_energy:
        friendly_name: "LEDBrick Daily Energy"
        unit_of_measurement: "kWh"
        device_class: energy
        value_template: >
          {{ (states('sensor.ledbrick_power_consumption') | float(0) * 24 / 1000) | round(2) }}
      
      schedule_status:
        friendly_name: "Schedule Status"
        value_template: >
          {% if is_state('switch.ledbrickplus_scheduler_enabled', 'on') %}
            Active ({{ states('sensor.ledbrickplus_scheduler_current_time') }})
          {% else %}
            Disabled
          {% endif %}
      
      moon_phase_description:
        friendly_name: "Moon Phase"
        value_template: >
          {% set phase = states('sensor.ledbrickplus_moon_phase') | float(0) %}
          {% if phase < 12.5 %}
            ðŸŒ‘ New Moon
          {% elif phase < 37.5 %}
            ðŸŒ’ Waxing Crescent
          {% elif phase < 62.5 %}
            ðŸŒ“ First Quarter
          {% elif phase < 87.5 %}
            ðŸŒ” Waxing Gibbous
          {% else %}
            ðŸŒ• Full Moon
          {% endif %}

# Binary sensors for monitoring
binary_sensor:
  - platform: template
    sensors:
      ledbrick_temperature_alert:
        friendly_name: "LEDBrick Temp Alert"
        device_class: heat
        value_template: >
          {{ states('sensor.ledbrickplus_temperature') | float(0) > 65 }}

# Main automations
automation:
  # Feeding mode automation
  - alias: "LEDBrick Feeding Mode"
    id: ledbrick_feeding_mode
    trigger:
      - platform: state
        entity_id: input_boolean.feeding_mode
        to: "on"
    action:
      - service: input_text.set_value
        target:
          entity_id: input_text.previous_pwm_scale
        data:
          value: "{{ states('number.ledbrickplus_pwm_scale') }}"
      
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: 30
      
      - service: timer.start
        target:
          entity_id: timer.feeding_timer
        data:
          duration: "00:{{ states('input_number.feeding_duration') | int }}:00"
  
  - alias: "LEDBrick Feeding Mode End"
    id: ledbrick_feeding_mode_end
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.feeding_timer
    action:
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: "{{ states('input_text.previous_pwm_scale') | float }}"
      
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.feeding_mode
  
  # Tank type configuration
  - alias: "LEDBrick Configure by Tank Type"
    id: ledbrick_tank_type_config
    trigger:
      - platform: state
        entity_id: input_select.tank_type
    action:
      - choose:
          # Reef configuration
          - conditions:
              - condition: state
                entity_id: input_select.tank_type
                state: "Reef"
            sequence:
              - service: esphome.ledbrick_plus_set_moon_base_intensity_8ch
                data:
                  intensity_ch1: 4.0
                  intensity_ch2: 0.0
                  intensity_ch3: 0.0
                  intensity_ch4: 2.0
                  intensity_ch5: 0.0
                  intensity_ch6: 0.5
                  intensity_ch7: 3.0
                  intensity_ch8: 0.0
          
          # Planted configuration
          - conditions:
              - condition: state
                entity_id: input_select.tank_type
                state: "Planted"
            sequence:
              - service: esphome.ledbrick_plus_set_moon_base_intensity_8ch
                data:
                  intensity_ch1: 1.5
                  intensity_ch2: 0.0
                  intensity_ch3: 0.0
                  intensity_ch4: 0.5
                  intensity_ch5: 0.3
                  intensity_ch6: 0.0
                  intensity_ch7: 0.0
                  intensity_ch8: 0.0
  
  # Update moon intensity when sliders change
  - alias: "LEDBrick Update Moon Intensity"
    id: ledbrick_update_moon
    trigger:
      - platform: state
        entity_id:
          - input_number.moon_blue_intensity
          - input_number.moon_white_intensity
    action:
      - service: esphome.ledbrick_plus_set_moon_base_intensity_8ch
        data:
          intensity_ch1: "{{ states('input_number.moon_blue_intensity') | float }}"
          intensity_ch2: 0.0
          intensity_ch3: 0.0
          intensity_ch4: "{{ states('input_number.moon_white_intensity') | float }}"
          intensity_ch5: 0.0
          intensity_ch6: 0.0
          intensity_ch7: 0.0
          intensity_ch8: 0.0

# Essential scripts
script:
  ledbrick_quick_brightness:
    alias: "Set Quick Brightness"
    sequence:
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: "{{ states('input_number.ledbrick_quick_brightness') | int }}"
  
  ledbrick_load_reef_preset:
    alias: "Load Reef Preset"
    sequence:
      - service: esphome.ledbrickplus_load_preset
        data:
          preset_name: "dynamic_sunrise_sunset"
      
      - service: input_select.select_option
        target:
          entity_id: input_select.tank_type
        data:
          option: "Reef"
  
  ledbrick_emergency_off:
    alias: "Emergency Off"
    sequence:
      - service: switch.turn_off
        target:
          entity_id: switch.ledbrickplus_scheduler_enabled
      
      - service: number.set_value
        target:
          entity_id: number.ledbrickplus_pwm_scale
        data:
          value: 0

# Groups
group:
  ledbrick_all_channels:
    name: "All LEDBrick Channels"
    entities:
      - light.ledbrickplus_channel_1
      - light.ledbrickplus_channel_2
      - light.ledbrickplus_channel_3
      - light.ledbrickplus_channel_4
      - light.ledbrickplus_channel_5
      - light.ledbrickplus_channel_6
      - light.ledbrickplus_channel_7
      - light.ledbrickplus_channel_8
  
  ledbrick_controls:
    name: "LEDBrick Controls"
    entities:
      - switch.ledbrickplus_scheduler_enabled
      - switch.ledbrickplus_moon_simulation_enabled
      - number.ledbrickplus_pwm_scale
      - input_select.lighting_mode
      - input_select.power_mode