name: Build and Publish Firmware

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Get firmware files  
        id: prepare
        run: |
          echo "matrix=$(find firmware -name "*.yaml" -not -name "secrets.yaml" -not -path "*/packages/*" | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Get version
        run: |
          if [[ "$GITHUB_EVENT_NAME" = "release" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${GITHUB_SHA::7}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Replace version in firmware file
        run: |
          sed -i "s/__VERSION__/$VERSION/g" ${{ matrix.file }}

      - name: Build ESPHome firmware
        uses: esphome/build-action@v6
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          version: 'latest'
          release-summary: LEDBrick Plus v${{ env.VERSION }}
          release-url: https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }}
        env:
          # Mock secrets for compilation
          SECRETS_api_encryption_key: "d82RHjo1BhxvG5kcKlsr6QDXiorpOQPLkHfThyMMniI="
          SECRETS_ota_password: "8a49ab2de4d3a193d05d29f8c843f398" 
          SECRETS_wifi_ssid: "More Fish Feeding"
          SECRETS_wifi_password: "clownfish"

      - name: Copy firmware and manifest
        run: |
          # ESPHome build action creates a directory with the device name
          DEVICE_DIR="${{ steps.esphome-build.outputs.name }}"
          echo "Looking for build output in directory: $DEVICE_DIR"
          ls -la
          if [ -d "$DEVICE_DIR" ]; then
            echo "Contents of $DEVICE_DIR:"
            ls -la "$DEVICE_DIR"/
            mkdir -p output
            cp "$DEVICE_DIR"/*.bin output/ 2>/dev/null || echo "No .bin files found"
            cp "$DEVICE_DIR"/*.json output/ 2>/dev/null || echo "No .json files found"
          else
            echo "Device directory $DEVICE_DIR not found, searching for files..."
            find . -name "*.bin" -exec cp {} output/ \; 2>/dev/null || true
            find . -name "*.json" -exec cp {} output/ \; 2>/dev/null || true
          fi
          echo "Final output directory contents:"
          ls -la output/ || echo "Output directory is empty or doesn't exist"

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ steps.esphome-build.outputs.name }}
          path: output

  publish:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Get version
        run: |
          if [[ "$GITHUB_EVENT_NAME" = "release" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${GITHUB_SHA::7}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware-artifacts

      - name: Prepare output directory
        run: |
          mkdir -p output
          cp -r static/* output/

      - name: Copy firmware files
        run: |
          echo "Available firmware artifacts:"
          ls -la firmware-artifacts/
          for artifact_dir in firmware-artifacts/*/; do
            echo "Processing artifact directory: $artifact_dir"
            ls -la "$artifact_dir"
            # Copy all .bin files
            find "$artifact_dir" -name "*.bin" -exec cp {} output/ \;
            # Copy manifest.json if it exists
            if ls "$artifact_dir"*.json 1> /dev/null 2>&1; then
              cp "$artifact_dir"*.json output/manifest.json
              echo "Copied manifest file"
            fi
          done
          echo "Final output directory for Pages:"
          ls -la output/

      - name: Replace version in HTML
        run: |
          sed -i "s/__VERSION__/$VERSION/g" output/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: output

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4